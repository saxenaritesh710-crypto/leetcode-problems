import java.util.*;

public class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums1.length == 0 || nums2.length == 0 || k == 0) return result;

        // Min-heap storing [sum, i, j]
        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> a[0] - b[0]);

        // Step 1: push first element of nums2 with each nums1[i]
        for (int i = 0; i < Math.min(nums1.length, k); i++) {
            heap.offer(new int[]{nums1[i] + nums2[0], i, 0});
        }

        // Step 2: extract k smallest pairs
        while (k-- > 0 && !heap.isEmpty()) {
            int[] curr = heap.poll();
            int sum = curr[0], i = curr[1], j = curr[2];
            result.add(Arrays.asList(nums1[i], nums2[j]));

            // If there is a next element in nums2 for this nums1[i]
            if (j + 1 < nums2.length) {
                heap.offer(new int[]{nums1[i] + nums2[j + 1], i, j + 1});
            }
        }

        return result;
    }
    // For quick testing
    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] nums1 = {1, 7, 11};
        int[] nums2 = {2, 4, 6};
        int k = 3;
        System.out.println(sol.kSmallestPairs(nums1, nums2, k));
        // Expected Output: [[1,2],[1,4],[1,6]]
    }
}
