import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals.length == 0) return new int[0][];
        
        // Sort intervals by start time
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        
        List<int[]> merged = new ArrayList<>();
        int[] current = intervals[0];
        
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] <= current[1]) {
                // Overlapping intervals, merge them
                current[1] = Math.max(current[1], intervals[i][1]);
            } else {
                // No overlap, add the previous interval
                merged.add(current);
                current = intervals[i];
            }
        }
        
        // Add the last interval
        merged.add(current);
        
        return merged.toArray(new int[merged.size()][]);
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] intervals = {{1,3},{2,6},{8,10},{15,18}};
        int[][] merged = sol.merge(intervals);

        System.out.print("[");
        for (int i = 0; i < merged.length; i++) {
            System.out.print(Arrays.toString(merged[i]));
            if (i != merged.length - 1) System.out.print(",");
        }
        System.out.println("]");
    }
}
